// Code generated by go-bindata.
// sources:
// artifacts/backup-crd.yaml
// artifacts/backup-cronjob.yaml
// artifacts/backup-pvc.yaml
// artifacts/mysql-configmap.yaml
// artifacts/mysql-crd.yaml
// artifacts/mysql-service-read.yaml
// artifacts/mysql-service.yaml
// artifacts/mysql-statefulset.yaml
// DO NOT EDIT!

package artifacts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _artifactsBackupCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\x85\xbf\x20\x68\x3b\x94\x12\xe8\x38\x90\x00\x89\xde\x9b\x35\x8b\xb5\x49\x1c\x62\x67\xc5\xfd\x3d\xda\x9c\x28\x8e\x86\x72\x3c\x1e\xbd\xb1\xb1\xf2\x3b\x35\x65\x29\x01\xb0\x32\x7d\x1b\x95\x43\xa9\xdf\x6e\xd5\xb3\xdc\xec\xd3\x4c\x86\x93\xdb\xb8\x2c\x01\xee\xbb\x9a\xe4\x57\x52\xe9\x2d\xd2\x03\x7d\x70\x61\x63\x29\x2e\x93\xe1\x82\x86\xc1\x01\x14\xcc\x14\x20\x9f\xf5\x2b\xcd\x18\xb7\x5e\xd5\xc7\xe6\x87\x96\x4a\x0d\x4d\x9a\x5f\x9b\x25\xbf\xb2\x7d\xf6\xd9\x47\xc9\x4e\x2b\xc5\x23\xbb\x36\xe9\x35\xc0\xbf\xfb\x17\x8a\x1e\x11\x80\x4b\xb7\xa7\xf3\xdb\xcb\xe9\x6e\x00\xc7\x34\xb1\xda\xe3\x5f\xe7\xc4\x6a\xc3\x55\x2e\x6b\x4f\xd8\xae\x8a\x0e\xa7\xa6\xde\x30\x5d\x1f\xe0\x00\x34\x4a\xa5\x00\xcf\x07\xb6\x62\xa4\xc5\x01\xec\xbf\xaf\xdb\x27\xf7\x13\x00\x00\xff\xff\xe5\xf5\xf0\x5c\x4a\x01\x00\x00")

func artifactsBackupCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupCrdYaml,
		"artifacts/backup-crd.yaml",
	)
}

func artifactsBackupCrdYaml() (*asset, error) {
	bytes, err := artifactsBackupCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupCronjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6e\xd3\x40\x10\xbd\xfb\x2b\x46\x81\xa8\x07\xb4\x76\xa2\x1e\x90\x2c\xf5\x00\x29\x08\x10\x29\x81\x96\x4a\xdc\x3a\x5e\x4f\x93\xa5\xde\x5d\x77\x77\x1c\x12\xa5\xf9\x77\xb4\x76\x52\xe2\x6d\x23\x95\x39\xf8\xf0\xe6\xcd\xf8\xcd\x9b\x59\xac\xd5\x35\x39\xaf\xac\xc9\xa1\x40\x96\x8b\x6c\x39\x2e\x88\x71\x9c\xdc\x29\x53\xe6\x30\x71\xd6\x7c\xb1\x45\xa2\x89\xb1\x44\xc6\x3c\x01\x30\xa8\x29\x87\xcd\x66\x9f\xbc\x40\x4d\x90\xb6\xdf\xed\x36\x01\xb0\x7f\x0c\xb9\x1f\x74\x4b\x8e\x8c\x24\x1f\x4a\x00\x04\x74\x0d\xa7\xeb\xcb\xef\x5f\xdf\xa3\xbc\x6b\xea\x16\x07\x38\x94\x20\x5d\xaa\xd7\xfe\xbe\xb2\x35\x39\x64\xeb\xd2\xb9\xe3\x2a\x9d\x2b\x5e\x34\x45\x2a\xad\xce\x96\xe3\x5d\xd5\xa3\x88\x83\x1f\x87\x68\x54\xd9\xc1\x3f\x3f\x9f\x07\xd4\xd7\x24\x83\x02\x2f\x17\x54\x36\x15\xe5\x30\x08\xd9\xcb\x9a\x64\x7a\xa5\xda\xca\x41\x02\xf0\xdb\x16\x57\xa4\xeb\x0a\x99\x3a\xbd\xfb\xba\x10\xdc\xcb\xc4\xd9\x10\x8e\x3c\xa3\xe3\x99\xad\x94\x5c\xe7\xf0\xcd\x7c\x44\x55\x35\x8e\x0e\x28\x4b\x5b\x35\x7a\xef\x46\x17\x62\x37\x45\x71\x68\x47\x17\x75\x70\xc4\x33\x19\xbe\x6e\xeb\x26\x15\x2a\x9d\xf7\x28\x00\x32\x80\x17\x7b\x23\x66\xd7\x93\x78\x13\xf1\x8f\xa4\x35\xb7\xbd\x1e\xa4\x6b\x5e\x9f\x2b\x97\xc3\xe6\x18\x5f\xcd\x85\xc6\xbe\xb8\x0e\x9e\x62\x1d\x0b\xea\xaa\xda\x0d\x26\x3d\x3a\xa3\x32\xe4\x5e\x3a\xbc\xd2\x38\xa7\x1c\xc2\xee\xb3\x15\x3b\xec\x28\x79\x58\x81\xe7\x48\x89\xd6\x68\xca\xbe\x0e\x01\x05\xfa\x45\x04\x0d\x84\x1c\x44\xd0\x43\xa4\xde\x13\x83\xa0\x55\x12\xc1\xaf\x60\x52\x59\x43\x10\xce\x1f\x6e\x9d\xd5\xa0\xd1\x33\xb9\x34\xe2\x9d\xbf\xbb\xfa\x70\x76\x53\x22\x13\x9c\xbc\x19\xfe\x12\x43\x2d\x86\xa5\x18\x7e\x12\xc3\xe9\xc9\x4d\xc4\xd5\x77\xa5\x72\x90\xb5\x4e\x65\xdd\x78\xd9\xc1\x2d\x67\xaf\x37\xa1\xdb\x36\xb6\x57\x22\x83\x10\x8e\xe4\x52\x58\x53\xad\xe1\xf1\x92\x27\x55\x13\x24\xc1\x76\x2b\x46\xe9\x33\x28\x9c\x9e\x8e\xde\xc2\x03\xac\x0a\xcf\x8e\x50\x83\x58\x81\x98\xbc\x40\xc0\x13\x2f\x66\x8e\x6a\x74\x04\xbc\xa0\xdd\xea\x62\x1f\xfe\x6d\x0c\x84\xa8\x77\x74\x21\x18\xdd\x9c\x58\x94\xca\x9d\xfd\xd7\xd8\xdd\xbb\x99\xda\xc6\xb0\x8f\xf7\x7c\xf4\x82\x00\x74\x28\x98\x21\x2f\xf2\xe3\x53\x3e\xdb\xed\xc9\x1b\xe9\xf7\x22\x96\xbb\x7e\x81\x98\x96\x11\xd5\x91\xb7\x8d\x93\xe4\xe3\xa7\x11\x52\xf7\x0d\xf9\x78\x88\x2e\x64\xdd\xe4\x30\x1e\x8d\xf4\x33\x39\x4d\xda\xba\x75\x9b\x9e\xaa\xbf\x01\x00\x00\xff\xff\x9a\x10\x14\x10\xb0\x05\x00\x00")

func artifactsBackupCronjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupCronjobYaml,
		"artifacts/backup-cronjob.yaml",
	)
}

func artifactsBackupCronjobYaml() (*asset, error) {
	bytes, err := artifactsBackupCronjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-cronjob.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsBackupPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x31\x8a\xc3\x30\x10\x45\x7b\x9d\xe2\x5f\x60\x0d\xdb\xaa\x75\xed\xc5\xac\xc1\xa9\x07\xe9\x13\x44\x2c\xc9\xd1\xc8\x81\x60\x7c\xf7\xa0\x38\x69\x06\xde\xfc\x07\xef\x16\x92\xb7\x18\x59\x34\x68\x65\xaa\x73\x5e\xb6\xc8\x7e\x91\x10\x8d\xac\x61\x6e\x43\x4e\x16\x8f\x5f\x13\x59\xc5\x4b\x15\x6b\x80\x24\x91\x16\xfb\x8e\x71\xee\xff\x24\x12\xdd\xfb\x1e\x87\xd1\x95\xae\x19\xe2\x1c\x55\x87\xec\xa9\x0d\x81\x1f\xfc\x53\xfc\xa5\x84\xca\x41\xd2\xd3\x00\x85\x9a\xb7\xe2\xbe\x42\xe1\x7d\xa3\xd6\x0f\x01\x5a\x73\x91\xeb\x99\xe9\xa6\x95\xae\x9b\xce\x4f\xcb\xbc\x02\x00\x00\xff\xff\x31\xd3\xda\x23\xb8\x00\x00\x00")

func artifactsBackupPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsBackupPvcYaml,
		"artifacts/backup-pvc.yaml",
	)
}

func artifactsBackupPvcYaml() (*asset, error) {
	bytes, err := artifactsBackupPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/backup-pvc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x81\x73\x05\xd7\x6c\xe2\xec\xea\x22\x0e\xd7\xe6\xda\x06\x93\x4b\xcc\xc5\x42\xc1\x87\x97\x06\xba\x39\x38\x26\xf7\xbb\xff\x51\xf6\x37\x2e\xea\x93\x58\x2c\x27\xf3\xf4\xe2\x2c\x2e\x49\x46\x3f\x5d\x29\x9b\xc8\x95\x1c\x55\xb2\x06\x10\x8a\x6c\x11\x57\x7d\x05\x03\x04\xea\x39\xe8\xf6\x0f\x50\xce\xfb\x60\xc7\x91\xb4\x72\x39\x0e\x32\x5a\x7c\x1a\x3a\xe0\x9c\x73\x58\x51\x67\xaf\x18\xda\x05\x24\x09\x2b\x92\xa0\xce\xbc\x6f\x34\x7b\x6f\x31\xf7\x68\x8f\x90\xa6\xae\xf7\x62\x00\x0d\xb4\xf0\xbf\xcd\x86\xf5\x47\x4f\xdf\x99\x4b\x57\x98\x5c\xb7\x59\xf3\x0d\x00\x00\xff\xff\x1c\x35\x5e\xba\x03\x01\x00\x00")

func artifactsMysqlConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlConfigmapYaml,
		"artifacts/mysql-configmap.yaml",
	)
}

func artifactsMysqlConfigmapYaml() (*asset, error) {
	bytes, err := artifactsMysqlConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\x85\xbf\x20\xe8\x3a\x94\xf6\xe8\x38\x90\x00\x89\xde\x97\x35\x8b\x75\x49\x1c\x6c\x67\xc5\xfd\x3d\xda\x5d\x51\x00\x05\xa5\x67\x3c\x7a\x63\x63\xe7\x57\x52\x63\x69\x09\xb0\x33\x7d\x3a\xb5\x75\xb2\x78\xb9\xb5\xc8\x72\xb3\x1c\xce\xe4\x78\x08\x17\x6e\x53\x82\xe3\x30\x97\xfa\x4c\x26\x43\x33\xdd\xd1\x1b\x37\x76\x96\x16\x2a\x39\x4e\xe8\x98\x02\x40\xc3\x4a\x09\xea\xd5\x3e\x4a\x2e\xc3\x9c\xd4\x62\xd6\xb8\x09\xd2\x49\xd1\x45\xe3\xac\x5e\xe2\xcc\xfe\x3e\xce\x31\x4b\x0d\xd6\x29\xaf\xe1\x59\x65\xf4\x04\xff\xee\xef\x18\x5b\x23\x00\x7b\xb9\x87\xeb\xcb\xd3\xe9\xb8\x13\x37\xb9\xb0\xf9\xfd\x1f\xeb\xc4\xe6\x9b\x6d\xdc\xe6\x51\x50\x7f\x76\xdd\xac\x5e\x86\x62\xf9\x75\x44\x00\xb0\x2c\x9d\x12\x3c\xae\xe8\x8e\x99\xa6\x00\xb0\x7c\xff\x6f\x39\x84\xaf\x00\x00\x00\xff\xff\x68\x53\xd4\x69\x4f\x01\x00\x00")

func artifactsMysqlCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlCrdYaml,
		"artifacts/mysql-crd.yaml",
	)
}

func artifactsMysqlCrdYaml() (*asset, error) {
	bytes, err := artifactsMysqlCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlServiceReadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4e\x03\x21\x14\x85\xf7\x3c\xc5\x7d\x81\xa2\x4d\x13\x17\x6c\x75\x63\xa2\x26\xb6\xd1\xfd\x2d\x73\xac\x44\xfe\xbc\x30\x63\x9a\xa6\xef\x6e\xa0\x13\x9d\x4d\x59\xb0\x38\x3f\x9c\x0f\xce\xee\x1d\x52\x5c\x8a\x86\xa6\xb5\xfa\x72\x71\x30\xb4\x83\x4c\xce\x42\x05\x54\x1e\xb8\xb2\x51\x44\x91\x03\x0c\x9d\x4e\xb4\x05\x0f\x73\xe0\x85\x03\x48\xf7\xfb\x7c\x56\x44\x9e\xf7\xf0\xa5\xa5\x89\x38\xe7\x1e\x5f\xd8\xe9\x27\x42\xb6\xf8\x80\x20\x5a\xcc\xb9\x15\x5d\x36\x9f\x8f\xbb\xd7\xa7\x7b\x3f\x96\x0a\xe9\x46\x7b\xe2\x9f\xcd\x8a\x0e\xc7\xf2\xed\x53\x86\x70\x4d\xa2\x0f\x52\xbd\x3e\xb8\xfa\x39\xee\xb5\x4d\xe1\x66\x5a\xcf\xad\x3f\xd0\xc5\x72\x3b\xa3\x1b\x2e\xf2\xdb\xe3\x43\x53\x4b\x86\x6d\x08\x39\x49\xed\x2c\xab\xb9\xda\x77\x7a\xa9\x59\x86\x36\x9b\xdb\x3b\x45\x54\xe0\x61\x6b\x92\x2b\xdf\xfb\x0d\x00\x00\xff\xff\x20\xd2\xb0\x1a\x49\x01\x00\x00")

func artifactsMysqlServiceReadYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlServiceReadYaml,
		"artifacts/mysql-service-read.yaml",
	)
}

func artifactsMysqlServiceReadYaml() (*asset, error) {
	bytes, err := artifactsMysqlServiceReadYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-service-read.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4e\x03\x21\x14\x85\xf7\x3c\xc5\x7d\x81\xa2\x4d\x13\x17\x6c\x75\xd3\x44\x1b\xb5\xd1\xfd\x2d\x3d\x56\x22\x7f\x5e\x98\x31\x4d\xd3\x77\x37\x30\xa3\x76\x23\x0b\x16\xe7\x87\xf3\xc1\xd9\xbd\x42\x8a\x4b\xd1\xd0\xb8\x54\x1f\x2e\xee\x0d\x6d\x21\xa3\xb3\x50\x01\x95\xf7\x5c\xd9\x28\xa2\xc8\x01\x86\x4e\xa7\x1f\x73\xc3\x01\xa4\xfb\x7d\x3e\x2b\x22\xcf\x3b\xf8\xd2\x92\x44\x9c\x73\x8f\x5e\xd8\xe9\x2b\x42\x9e\xf1\x06\x41\xb4\x98\x73\x0b\x9a\xf6\x1e\x8e\xdb\xa7\xfb\x5b\x3f\x94\x0a\xe9\x46\x7b\xe2\x8f\xcb\x8a\x0e\xc7\xf2\xe9\x53\x86\x70\x4d\xa2\x0f\x52\xbd\x3e\xb8\xfa\x3e\xec\xb4\x4d\xe1\x6a\x5c\xce\xad\x5f\xc8\x8b\xe5\x76\x06\xb7\x9f\xe4\x97\xf5\x5d\x53\x4b\x86\x6d\x08\x39\x49\xed\x2c\x8b\xb9\xda\x77\x7a\xa9\x59\x86\x56\xab\xeb\x1b\x45\x64\x27\xb6\xf5\xa3\xa1\x4d\x8a\x50\x44\x05\x1e\xb6\x26\xf9\xe7\xc3\xdf\x01\x00\x00\xff\xff\x9b\x05\x34\x42\x57\x01\x00\x00")

func artifactsMysqlServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlServiceYaml,
		"artifacts/mysql-service.yaml",
	)
}

func artifactsMysqlServiceYaml() (*asset, error) {
	bytes, err := artifactsMysqlServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _artifactsMysqlStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x73\x1a\x39\x12\xfe\xee\x5f\xd1\x45\x5c\x6b\x7c\xb1\x30\x24\x95\x4b\x1d\x09\xb9\xf2\x12\xf2\x52\x67\x1b\x2f\xb0\xc9\x6d\x39\x1c\x2b\x34\x0d\xa8\x3c\x23\x8d\x25\x0d\x36\xe7\xf8\x7e\xfb\x95\x46\xc3\xa0\x19\x06\xc7\x49\xd5\x5e\xd5\x1e\x1f\xec\x41\x2f\xdd\x4f\x3f\xea\x6e\x75\x0f\x34\xe6\x9f\x50\x69\x2e\x45\x1b\x68\x1c\xeb\xe3\x65\x6b\xef\x8a\x8b\xa0\x0d\x43\x43\x0d\xce\x92\x70\x88\x66\x2f\x42\x43\x03\x6a\x68\x7b\x0f\x40\xd0\x08\xdb\x70\x77\xe7\x2f\x38\xa7\x11\x42\x23\xfd\x7b\x7f\xbf\x07\x20\x6f\x04\xaa\x01\xce\x50\xa1\x60\xa8\xed\x36\x00\x02\x4e\xf0\xd9\x6a\xf8\xcb\x69\x37\x4c\xb4\x41\x95\x4e\x00\xf8\x28\x98\x6a\x44\x2b\x7d\x1d\xca\x18\x15\x35\x52\x35\xe6\xca\x84\x8d\x39\x37\x8b\x64\xda\x60\x32\xb2\x08\xdd\xae\x1c\x89\xa7\xd9\x7e\x12\x1e\xb8\xe1\x5f\x3f\xbe\xb5\xa3\x3a\x46\x66\x21\x68\x0c\x91\x19\xa9\x1c\x9c\x88\x1a\xb6\x38\xa5\x53\x0c\x33\x7c\x16\x46\x5c\x96\xa7\x51\x2d\x39\xc3\xf3\x0a\x55\x0a\xe3\x90\x33\xaa\xdd\xf8\x30\x46\xd6\x18\x64\x43\x6e\x81\xc1\x28\x0e\xa9\xc1\x4c\x9f\xc7\xa1\xfd\x84\x05\xd5\x95\xca\x01\xd6\xd0\xed\x87\x0b\x6e\xba\x52\x18\xca\x05\xaa\x7c\x23\xc9\x68\xb0\xb3\x24\x25\x2e\x97\xc8\x23\x3a\xc7\x36\xa4\x83\x6d\x0b\x44\x9b\x7c\x8e\xc9\x28\xa2\x22\xd8\xa8\x27\x30\xa5\x7a\xe1\x7d\xad\x11\x56\xf3\xbe\x7e\xcd\x9f\x2d\x29\x06\x08\xde\x7a\x23\x4f\xe0\x3d\x0a\x7b\x5e\xe8\xd4\xa5\xbc\xa1\x22\x3c\x80\x99\x92\x11\xc4\x32\x00\xa9\x02\x2e\x68\x08\x5c\x04\x78\xdb\xf0\x36\x5f\x5e\xc2\xef\x0b\xa9\x8d\x35\xe4\x77\xe8\xfc\x07\x48\xfd\xb2\x49\xfe\x36\x7e\x7a\xb8\x0f\xe3\x31\x7c\xfd\x0a\x78\xcb\x0d\xb4\xbc\x2d\x99\xac\xce\xfe\xdd\xcf\x27\xc3\x0f\x93\x41\xef\xec\x64\xd4\xfd\x70\xd9\x1a\xdf\x7b\x8b\x90\x2d\x24\x5c\xa6\x78\x82\x31\xbc\x81\xe3\x48\x98\x63\x26\xc5\xac\x11\x1c\xe7\xf8\x1a\x4c\xcc\x0a\x86\x9c\x04\x01\x50\x01\x72\x36\xb3\x66\x1a\x09\x74\x29\x79\x00\x0a\xd3\x2d\xc1\xc6\xb2\x4e\x13\x96\x34\x4c\xb0\x51\x56\xb9\x59\xb1\x5f\xaf\xb7\x9a\x4d\x78\x0a\xfb\x19\xe0\xc3\x43\x78\xf3\x58\x20\x5d\x19\xaf\xac\x57\x28\x19\x2b\x6e\x99\x75\x3b\x60\xc6\x43\xd4\x8e\x56\x3b\xc2\xe7\x24\xa2\xb1\x05\x8a\x51\x6c\x56\x6f\xb9\xf2\x01\xf1\x99\xa5\x77\xad\x1e\x08\x5e\x43\x13\xc6\xe3\x57\x60\x16\x28\xbc\x75\x00\x2c\xde\xe0\x72\x32\x8f\x23\x6a\x63\xd4\x02\x2b\x40\xf6\xed\x0d\x35\x7e\x4b\x8a\x0e\xe9\x12\x1f\x12\x32\xe3\xf9\x97\xa5\x0c\x93\x08\xcf\x64\x22\x8c\xf6\x7d\xd3\xf9\xb8\xdd\xea\xed\x8b\xec\xb2\x0b\x6a\x16\x6d\x5f\x72\xe5\x2e\x07\xe5\x1b\x7b\x0b\x8b\xf2\xdd\xa1\x14\x58\x1d\x58\x36\x31\x1d\xdf\x1a\x45\xa7\x94\x5d\x25\xf1\x1f\x1e\x62\xc3\x2b\x1e\xdb\x73\x73\x98\xec\xd1\xda\x7c\x02\x34\x54\x48\x83\x95\x0d\x12\x6d\x74\x29\xb0\x48\x00\xc7\x4b\xaa\x8e\x43\x3e\x3d\x4e\x8d\x70\x7f\x6d\x5c\xfd\xf4\x93\x8b\xab\xe6\xff\x20\x14\x9f\xc0\x00\xb5\x91\x0a\x1d\xe4\xd4\x79\x1d\x6b\x20\x05\x64\x7e\xf6\x43\x6e\x7b\x77\x67\x17\x0b\xcc\x32\xf0\x3b\x25\xa3\x9f\x53\xc1\x0d\xf7\x2f\xcd\xa6\xb5\xda\xe6\x76\xf8\x31\x40\x00\x9b\x83\x06\x42\x62\x85\x31\x55\x08\x84\x18\xaa\xe6\x68\x48\xc0\x55\x27\x23\xd8\x2d\x3a\xde\xbd\x99\xc9\x78\x45\xec\xb7\x47\x6f\xbf\xbb\x03\x14\xc1\xb6\x0d\x25\x8f\xc8\x91\x43\xbd\x90\x6c\xa1\x79\x58\xb4\x65\xeb\xdc\xbd\x10\x4c\x53\x4f\x2a\x6e\xc3\x4c\xac\x70\xc9\x65\xa2\x21\xc6\x22\x2d\x82\x51\x03\x84\x28\x64\x4b\x22\x45\xb8\xf2\x2f\x30\xb2\x5f\xaf\xaf\x4f\x90\xb4\x0e\x0f\x1b\xde\x1c\x3c\x7f\xde\x7c\x09\x5f\xe1\x76\xaa\x8d\x42\x1a\x01\xb9\x05\xd2\x2d\xb9\x6a\x01\xd2\x45\xc6\xb8\xb5\xd6\x51\xe4\xe3\x78\xc4\xe1\x54\x8b\x7e\x38\xe1\x58\x06\x76\x24\x8d\x5d\x48\x75\x32\x75\x2b\x8a\x13\x8f\x48\x61\x68\x58\xe6\x02\xa5\x44\xf6\x03\x2e\xbe\x56\xa7\x9c\x93\xef\x4a\x7c\x9e\xc3\x55\x99\x90\xd7\x35\x9e\xca\x8f\x42\x1b\x2a\x18\xfa\xda\xca\xee\xc9\x76\x56\x29\x8f\x2f\x50\x50\x2c\xb7\xcf\xe3\xec\xb7\xe1\x2f\xa7\x93\x41\xbf\x3f\x9a\x5c\x9c\x0c\x87\x9f\xfb\x83\xb7\x1e\xee\xf4\x36\xb6\x50\xdb\x05\x67\xd7\xc8\x14\x9a\x7f\xe0\x6a\x80\xb3\xe2\x8c\x5f\x42\xa6\x76\x5e\x50\xad\x6f\xa4\xda\x8a\x34\x80\x2b\x5c\xb5\x21\xce\xa6\xf3\xb9\x58\xaa\x2a\xb7\x29\xfb\x44\xce\xc7\x85\x54\xa6\x6d\x7d\xff\xaf\x7f\x2a\x07\x54\xa8\x65\xa2\xf2\x42\x7e\x3d\x78\x9d\xa0\x36\xba\x5d\xba\xff\x93\x36\xbc\x68\x36\xa3\xc2\x68\x84\x91\x54\xab\x36\xb4\xde\x6f\xf2\x4c\xc8\x97\x28\x50\xeb\x0b\x25\xa7\xe8\x0b\xc1\xdb\x4d\xcd\xbb\xe6\xcf\xdd\xa4\x70\x59\xb3\x37\x68\xed\x28\xbd\x39\x8f\xa0\x96\xa2\xa5\x41\xc4\x05\xc4\x5c\xcc\x81\xc4\x5f\x6a\xfb\x77\x15\x5e\x72\xff\xa5\x56\x1b\xfb\xf7\x8b\xe0\x86\xd3\xf0\x2d\x86\x74\x35\x44\x26\x45\xa0\xdb\xf0\xdc\xcf\x88\x31\x2a\x2e\x83\x7c\xae\xe5\xcf\x19\x1e\xa1\x4c\x4c\x3e\xf9\xc2\x63\x8a\x06\xfc\x91\x56\x3d\x81\xee\x02\xd9\x15\xdc\x20\x30\x2a\xd2\x05\x89\x41\xb8\x4e\x50\x71\xd4\x20\x97\xa8\x60\xd4\xbd\x80\xba\xbe\xe2\x31\x11\x68\x6e\xa4\xba\xb2\x56\x72\x6d\xab\xd3\x52\x4a\x7f\x98\x23\x20\x0b\x68\x3d\x7b\xd9\x68\x36\x9a\x8d\xd6\x83\x34\x01\x41\x38\x18\xf6\x4e\x7b\xdd\x11\xb4\x0e\xbe\x4d\xda\x8b\xdd\x9c\x3d\x7b\x80\xb2\x56\x29\x31\x6c\x12\xf8\x77\x56\x59\x7f\xe6\x3c\x51\x61\x74\x55\xb2\x78\xf9\x47\x95\x94\xac\x5c\x1c\xee\x15\xae\xdc\xb7\x68\x50\x45\x5c\x20\x4c\xb9\x08\xe5\x1c\x62\xa9\xb9\xe1\xd2\x36\x47\xae\xe2\x08\xd2\x04\x75\x64\xaf\x27\x2a\x56\xdb\x05\x1c\x99\x79\x36\x4e\xd2\x46\x60\xc2\xc5\x4c\x56\x97\x72\x4f\xe0\x9f\x46\x51\x77\xcf\xe4\x55\xed\x3c\xeb\x2b\x03\xa0\x10\x53\x65\x1d\x10\x6a\xdd\x0f\x27\xe7\xef\x7b\x70\x76\x32\x1c\xf5\x06\x30\xea\xd7\xd2\xa8\x59\x95\xa4\x4d\x91\xd1\x44\x23\xdc\xe0\x81\x72\x25\x92\x8d\x9e\xb4\xa0\x49\xe3\x8d\x6b\x63\x07\x5c\x7f\x52\xcc\x57\xcb\x1d\xb8\xd9\x82\x8a\x39\x4e\x5c\x95\x35\x31\xb2\xa1\xaf\xc3\x06\x2f\x9b\xf1\x71\x2e\x6c\x65\xe9\x89\x70\x04\x3a\x19\x5c\x80\x59\x70\x0d\x8c\x6a\x84\x3a\x37\x07\x1a\x12\x8d\x21\x6a\x5d\x0a\x69\x15\x95\x08\xf4\xa4\x14\x7a\xb0\x2a\xb2\x7d\x8d\x3b\xd8\xfe\x5c\xe0\x25\xe0\x0a\x99\x09\x57\x8e\xa0\xac\x02\x86\x0b\xaa\xf4\xd6\xf9\x17\x61\xda\x9e\xc1\x96\x81\xd5\xca\xd3\x2e\xe2\x5f\xf5\xc6\x5f\xfe\x7e\x78\x79\xd9\xd6\x31\x65\xd8\x1e\x8f\x9f\xa6\x03\x3b\x7b\x8a\xd4\xf6\x6f\x1a\x9e\xb5\xdb\x5b\xde\x90\x3d\x4d\x4e\xfb\xef\x27\xef\x3e\x9e\xf6\x3a\x07\xdb\xbd\xc9\xc1\xd1\x97\x52\xe4\xda\x8f\xb7\xf1\xa2\x3f\x2c\xb7\x34\xcf\xc6\xf7\x35\x78\xf3\x08\x1f\x98\xf1\x62\x20\xb9\x3c\xcf\x67\x36\xd5\x0b\xc4\xc0\x36\xeb\x4c\x46\x71\x88\x06\x81\x66\xc5\xfb\x74\x05\xda\x58\x07\x17\xf3\xf5\xab\xa5\x32\xd7\xf9\x39\xef\x80\x50\x7d\xd0\x8e\xa4\xcf\x94\xa7\xa2\x67\x52\xb9\xca\x20\x45\x31\x45\x70\x61\x56\xa7\x8c\x61\x9c\xae\x60\x52\x08\x64\x56\xb7\x3e\xac\x15\x24\x25\xc2\xf0\x10\x2a\x2f\x94\x1d\xf7\x49\x7a\x9d\xd4\xd6\xd7\x49\xed\x15\x04\x12\x74\x88\x18\x43\xcb\x3e\x0b\xdc\xab\x80\xfa\xd1\xdd\x33\xfc\xdf\x25\x2a\xb2\x77\x1e\x29\x5b\x6b\x57\xac\x95\x43\x4f\xb8\xb8\xb2\x19\x6a\x9d\x48\xd3\x2a\x98\x2a\x73\x04\xd4\x18\x8c\x62\xe3\xe2\x8f\x1a\x12\x49\x6d\x88\x14\x6c\x3b\xfc\x77\x31\x5c\x39\x2e\x15\x9f\x17\x05\x7c\x17\x45\xaf\x5f\xf7\xfa\xef\xbc\xfd\xfb\xf5\xd7\x3b\xd5\x1c\x1e\xed\x55\x38\xec\x87\xfe\x70\xd4\x39\xf0\x7b\xaf\xa6\xdf\x6d\x1d\x54\x6e\xfa\x75\xd8\x1b\x74\x0e\x94\x94\xa6\x7a\x7e\x8d\xd0\x86\x4f\x15\xf0\xea\x5d\xdd\xfe\xf9\x79\xaf\x3b\x9a\x0c\x7a\xa3\xc1\x6f\x9d\x56\xf3\x95\xb7\x68\x38\x3a\x19\x8c\x60\x78\x7a\xf2\xa9\xe7\x0f\x17\xad\x2f\x07\xcf\xd0\x1e\x1d\xd0\xec\xad\x9a\x75\x5a\x6d\x9b\x0d\x97\x19\x34\xdc\x2c\x50\xac\x6b\x51\x0c\x6c\x14\xd9\x1e\xb5\xf0\x1a\xc4\x56\x56\xeb\x4e\x35\xe4\xda\xa0\x00\x42\xae\x10\x63\x22\xe3\xf4\xd9\x0a\x74\xed\x2b\x21\x11\xbd\x25\x36\x02\x74\xa7\xe5\x9a\x54\xc2\xa0\x98\x2a\x6a\x85\x66\x33\x7f\x48\x6f\x09\x92\xe6\x5b\x42\x5c\x57\xdb\xd9\xb4\xb7\x64\x21\xb5\xe9\x78\xee\x40\x12\x8d\xaa\x63\xd9\xb7\x1d\x6b\x56\x30\x74\x1e\x28\x5f\xff\xaf\x3b\x86\xd6\xce\x8e\xa1\xd9\x3c\x5b\xf7\x0c\xce\xf0\xad\x9e\xb2\x80\x6f\xfd\x0e\xb4\x0d\x77\xf7\x15\xeb\x4a\xef\x01\xdd\xd0\x19\x8d\x7d\x48\xdb\x3d\xdc\x77\x37\xe0\xbb\xda\xef\x18\x95\x4e\x1d\xd0\x7c\x4a\x6d\xe9\x86\x94\x17\xaa\x50\x66\x07\xce\x8b\xc5\x66\xb5\xba\x5c\x97\xdf\x7c\x2f\x37\x52\x47\xd9\x8f\x0f\x29\x5d\x64\xeb\xd7\x87\x2d\x67\xf9\xee\x9f\x23\xec\x85\xa1\xf5\x99\x0c\x50\xdb\xa6\x63\x80\x34\xf8\xac\xb8\xc1\xbe\x60\x98\xb7\x0d\x15\x7e\x50\xe5\x05\x96\xa5\xb4\xd8\xcf\x8d\x1e\xba\x11\xab\xf8\xbf\x01\x00\x00\xff\xff\x3a\x4c\x5c\xb4\xa3\x1a\x00\x00")

func artifactsMysqlStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_artifactsMysqlStatefulsetYaml,
		"artifacts/mysql-statefulset.yaml",
	)
}

func artifactsMysqlStatefulsetYaml() (*asset, error) {
	bytes, err := artifactsMysqlStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifacts/mysql-statefulset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"artifacts/backup-crd.yaml":         artifactsBackupCrdYaml,
	"artifacts/backup-cronjob.yaml":     artifactsBackupCronjobYaml,
	"artifacts/backup-pvc.yaml":         artifactsBackupPvcYaml,
	"artifacts/mysql-configmap.yaml":    artifactsMysqlConfigmapYaml,
	"artifacts/mysql-crd.yaml":          artifactsMysqlCrdYaml,
	"artifacts/mysql-service-read.yaml": artifactsMysqlServiceReadYaml,
	"artifacts/mysql-service.yaml":      artifactsMysqlServiceYaml,
	"artifacts/mysql-statefulset.yaml":  artifactsMysqlStatefulsetYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"artifacts": {nil, map[string]*bintree{
		"backup-crd.yaml":         {artifactsBackupCrdYaml, map[string]*bintree{}},
		"backup-cronjob.yaml":     {artifactsBackupCronjobYaml, map[string]*bintree{}},
		"backup-pvc.yaml":         {artifactsBackupPvcYaml, map[string]*bintree{}},
		"mysql-configmap.yaml":    {artifactsMysqlConfigmapYaml, map[string]*bintree{}},
		"mysql-crd.yaml":          {artifactsMysqlCrdYaml, map[string]*bintree{}},
		"mysql-service-read.yaml": {artifactsMysqlServiceReadYaml, map[string]*bintree{}},
		"mysql-service.yaml":      {artifactsMysqlServiceYaml, map[string]*bintree{}},
		"mysql-statefulset.yaml":  {artifactsMysqlStatefulsetYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
